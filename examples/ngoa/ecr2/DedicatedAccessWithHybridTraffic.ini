#
# Copyright (C) 2010 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file is for the ECR [1] study of next-generation optical access
# architectures.
#
# It provides a host configuration for hybrid traffic models:
# - FTP:
# - HTTP: It models a web user (HTTP 1.1) browsing web pages with several
#         embedded objects (e.g., images, applets, frames, etc) based
#         on [2]. It uses HTTPClientApp and TCPGenericSrvApp.
# - Video:
#
# To run, type "./run -f DedicatedAccessWithHybridTraffic.ini"
#
# References
# [1] N. K. Shankaranarayanan, Z. Jiang, and P. Mishra, "User-perceived performance
#     of web-browsing and interactive data in HFC cable access networks," Proc. of ICC,
#     June 2001.
# [2] J. J. Lee and M. Gupta, "A new traffic model for current user web browsing
#     behavior," Research@Intel, 2007 [Available online at
#     "http://blogs.intel.com/research/HTTP%20Traffic%20Model_v1%201%20white%20paper.pdf"].
#


[General]
total-stack = 64MB
network = EcrTestOfDedicatedAccess
#debug-on-errors = true
sim-time-limit = 1h

#################################
# results recording
#################################
result-dir = DedicatedAccessWithHybridTraffic
#**.host[*].tcpApp[*].**.scalar-recording = true
#**.server.udpApp[*].scalar-recording = true
#**.scalar-recording = false
**.vector-recording = false

#################################
# command environment settings
#################################
cmdenv-express-mode = true
cmdenv-performance-display = false

#################################
# Tk environment settings
#################################
tkenv-plugin-path = ../../../etc/plugins
#**.vector-recording = false

#################################
# Network/system settings
#################################
#*.N = 1  # number of ONUs (subscribers)
*.n = 1  # number of hosts (users) per ONU (subscriber)
#*.distribution_rate = ${dr=10}Mbps	# rate of distribution fiber (dr)
#*.feeder_rate = ${fr=10}Mbps	# rate of feeder fiber (fr)
#*.backbone_rate = 100Gbps  # rate of backbone network (br)
#*.backbone_delay = 5ms  # delay in backbone network (bd)
#**.host[*].numTcpApps = ${n=1..10}	# number of TCP applications per subscriber (n)

#################################
# Host settings
#################################
#### FTP #########################
**.host[*].numFtpApps = 1
**.host[*].ftpAppType = "TCPSessionApp"
**.host[*].ftpApp[*].active = true
**.host[*].ftpApp[*].address = ""
**.host[*].ftpApp[*].port = -1
**.host[*].ftpApp[*].connectAddress = "server"
**.host[*].ftpApp[*].connectPort = 1000
**.host[*].ftpApp[*].tOpen = exponential(0.1s)
**.host[*].ftpApp[*].tSend = 0
**.host[*].ftpApp[*].sendBytes = 1MB
**.host[*].ftpApp[*].sendScript = ""
**.host[*].ftpApp[*].tClose = 0
### Http ########################
**.host[*].numHttpApps = 1
**.host[*].httpAppType = "HttpClientApp"
**.host[*].httpApp[*].address = ""
### Due to issues in assigning ephemeral port numer, we assign port number
### statically in HttpClientApp.ned instead.
#**.host[*].tcpApp[*].port = -1
**.host[*].httpApp[*].connectAddress = "server"
**.host[*].httpApp[*].connectPort = 80
### Web workload model based on [1]
**.host[*].httpApp[*].startTime = uniform(0min, 1min)
**.host[*].httpApp[*].htmlObjectLength = trunc_lognormal(7.90272B, 1.7643B, 0B, 2MB)  # "replyLength" of the 1st request (for HTML object)
**.host[*].httpApp[*].numEmbeddedObjects = gamma_d(0.141385, 40.3257)
**.host[*].httpApp[*].embeddedObjectLength = trunc_lognormal(7.51384B, 2.17454B, 0B, 6MB)
**.host[*].httpApp[*].requestLength = uniform(0B, 700B)
**.host[*].httpApp[*].parsingTime = trunc_lognormal(-1.24892s, 2.08427s, 0s, 300s)
**.host[*].httpApp[*].thinkTime = 0s  # no time gap between requests (for embedded objects)
**.host[*].httpApp[*].idleInterval = lognormal(-0.495204s, 2.7731s)  # time gap between sessions ("Reading Time" in [2])
**.host[*].httpApp[*].reconnectInterval = 30s
### Streaming video #############
**.host[*].numVideoApps = 1
**.host[*].videoAppType = "UDPVideoStreamCli"
**.host[*].videoApp[*].localPort = 9999
**.host[*].videoApp[*].serverAddress = "server"
**.host[*].videoApp[*].serverPort = 3088
**.host[*].videoApp[*].startTime = uniform(1s, 5s)

#################################
# Server settings
#################################
### FTP #########################
**.server.numFtpSrvs = 1
**.server.ftpSrvType = "TCPSinkApp"
**.server.ftpSrv[*].address = ""
**.server.ftpSrv[*].port = 1000
### Http ########################
**.server.numHttpSrvs = 1
**.server.httpSrvType = "TCPGenericSrvApp"
### Another choice of server app (it does the same as TCPGenericSrvApp):
#  **.server.httpSrvType="TCPSrvHostApp"
#  **.server.httpSrv[*].serverThreadClass="TCPGenericSrvThread"
**.server.httpSrv[*].address = ""
**.server.httpSrv[*].port = 80
**.server.httpSrv[*].replyDelay = 0
### Streaming video #############
**.server.numVideoSrvs = 1
**.server.videoSrvType = "UDPVideoStreamSvrWithTrace"
**.server.videoSrv[*].serverPort = 3088
**.server.videoSrv[*].fps = 30  # frames per second
**.server.videoSrv[*].appOverhead = 12B
**.server.videoSrv[*].maxPayloadSize = 1460B  # maximum size of payload to be carried in RTP packets
**.server.videoSrv[*].traceFile = "videoTraces/terminator2_terse"

#################################
# General TCP settings
#################################
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
#**.tcp.sendQueueClass = "TCPVirtualDataSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
#**.tcp.receiveQueueClass = "TCPVirtualDataRcvQueue"

#################################
# Ethernet switch configuration
#################################
**.switch?.queueType = "DropTailQueue" # in Ethernet switches
#**.switch?.queueType = "REDQueue" # in routers (for better fairness among sessions)
**.switch?.queue[*].frameCapacity = 1000 # in Ethernet switches

#################################
# NIC configuration
#################################
#**.ppp[*].queueType = "DropTailQueue" # in routers
#**.ppp[*].queueType = "REDQueue" # in routers (for better fairness among sessions)
#**.ppp[*].queue.frameCapacity = 10  # in routers
#**.ppp[*].queue.frameCapacity = 100  # in routers


[Config N1_dr10_fr10_br1000_bd5]
*.uni_rate = ${ur=10}Gbps  # rate of UNI (ur)
*.distribution_rate = ${dr=10}Gbps  # rate of distribution fiber (dr)
*.feeder_rate = ${fr=10}Gbps  # rate of feeder fiber (fr)
*.backbone_rate = ${br=1000}Gbps  # rate of backbone link (br)
*.n = ${n=1..500}  # number of hosts per ONU (n)
#**.host[*].numTcpApps = ${n=1..400}  # number of HTTP clients per host (n)


#[Config N1_dr10_fr10_br1_bd5]
#*.distribution_rate = 10Mbps
#*.feeder_rate = 10Mbps
#**.client[*].numTcpApps = ${n=1..10}
#
#
#[Config N1_dr20_fr20_br1_bd5]
#*.distribution_rate = 20Mbps
#*.feeder_rate = 20Mbps
#**.client[*].numTcpApps = ${n=1..20}
#
#
#[Config N1_dr30_fr30_br1_bd5]
#*.distribution_rate = 30Mbps
#*.feeder_rate = 30Mbps
#**.client[*].numTcpApps = ${n=1..30}
#
#
#[Config N1_dr40_fr40_br1_bd5]
#*.distribution_rate = 40Mbps
#*.feeder_rate = 40Mbps
#**.client[*].numTcpApps = ${n=1..40}
#
#
#[Config N1_dr50_fr50_br1_bd5]
#*.distribution_rate = 50Mbps
#*.feeder_rate = 50Mbps
#**.client[*].numTcpApps = ${n=1..50}
#
#
#[Config N1_dr60_fr60_br1_bd5]
#*.distribution_rate = 60Mbps
#*.feeder_rate = 60Mbps
#**.client[*].numTcpApps = ${n=1..60}
#
#
#[Config N1_dr70_fr70_br1_bd5]
#*.distribution_rate = 70Mbps
#*.feeder_rate = 70Mbps
#**.client[*].numTcpApps = ${n=1..70}
#
#
#[Config N1_dr80_fr80_br1_bd5]
#*.distribution_rate = 80Mbps
#*.feeder_rate = 80Mbps
#**.client[*].numTcpApps = ${n=1..80}
#
#
#[Config N1_dr90_fr90_br1_bd5]
#*.distribution_rate = 90Mbps
#*.feeder_rate = 90Mbps
#**.client[*].numTcpApps = ${n=1..90}
#
#
#[Config N1_dr100_fr100_br1_bd5]
#*.distribution_rate = 100Mbps
#*.feeder_rate = 100Mbps
#**.client[*].numTcpApps = ${n=1..100}
#
#
#[Config N1_br1_bd5]
#**.client[*].numTcpApps = ${n=1, 2, 5, 10, 20, 30, 40, 50, 100..400 step 100}
#*.distribution_rate = ${dr=1..10}Mbps
#*.feeder_rate = ${dr}Mbps
