// $Id$
//------------------------------------------------------------------------------
//	HybridPonMac.h --
//
//	This file declares 'HybridPonMac' class in a Hybrid TDM/WDM-PON ONU.
//
//	Copyright (C) 2009 Kyeong Soo (Joseph) Kim
//------------------------------------------------------------------------------
/**
 * @file   HybridPonMac.h
 * @author Kyeong Soo (Joseph) Kim <kyeongsoo.kim@gmail.com>
 * @date   Fri Jun 26 17:44:42 2009
 * 
 * @brief  This file declares 'HybridPonMac' class in a Hybrid TDM/WDM-PON ONU.
 * 
 * 
 */


#ifndef __INET_HYBRIDPONMAC_H
#define __INET_HYBRIDPONMAC_H


#include <assert.h>
#include <omnetpp.h>
#include "HybridPon.h"
#include "HybridPonFrame_m.h"
/* #include "Monitor.h" */


/**
 * @class HybridPonMac
 * @brief MAC module in a hybrid TDM/WDM-PON ONU
 *
 * This is an implementation of a MAC layer for a hybrid TDM/WDM-PON
 * ONU. The current implementation is based on the SUCCESS-HPON
 * architecture \ref [1].
 *
 * If the channel is busy a random waiting time is computed and after
 * this time the channel is sensed again. Once the channel gets idle
 * the message is sent. (State of the channel is obtained from SnrEval
 * via NotificationBoard.)
 *
 * @todo Extend for general TDM/WDM-PON architectures (other than
 * SUCCESS-HPON)
 *
 * ATTENTION: 
 *
 * @ingroup hybridpon
 * @author Kyeong Soo (Joseph) Kim <kyeongsoo.kim@gmail.com>
 */
class HybridPonMac : public cSimpleModule
{

protected:
	//--------------------------------------------------------------------------
	//	Member variables
	//--------------------------------------------------------------------------

	// NED parameters (as defined in NED files)
	int lambda;
    int queueSize;                      // size of FIFO queue [bits]

	// Status variables: Scalars
    int busyQueue;                      // current queue length [bits]
    cQueue queue;                       // FIFO queue holding upstream Ethernet frames.

	// Status variables: Vectors

/* 	// Module pointer */
/* 	Monitor *monitor;            // 'Monitor' node */


protected:
	//--------------------------------------------------------------------------
	//	Member functions
	//--------------------------------------------------------------------------

	// Event handling
    void receiveFrameFromUni(cPacket *frame);
    void receiveDataFromPon(HybridPonFrame *ponFrameFromOlt);
    void receiveGrantFromPon(HybridPonFrame *ponFrameFromOlt);

    // OMNeT++
    virtual void initialize(void);
    virtual void handleMessage(cMessage *msg);
    virtual void finish(void);
};


#endif  // __INET_HYBRIDPONMAC_H
